// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileDownloadRequest {
    #[prost(string, tag = "1")]
    pub file_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub peer_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileDownloadResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub chunk: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "2")]
    pub last_chunk: bool,
    #[prost(string, tag = "3")]
    pub ext: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Message {
    #[prost(bytes = "vec", tag = "1")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
    #[prost(int64, tag = "2")]
    pub global_counter: i64,
    #[prost(int64, tag = "3")]
    pub timestamp: i64,
    #[prost(int32, tag = "4")]
    pub counter: i32,
    #[prost(string, tag = "5")]
    pub peer_id: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Messages {
    #[prost(message, repeated, tag = "1")]
    pub messages: ::prost::alloc::vec::Vec<Message>,
    #[prost(string, tag = "2")]
    pub peer_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub peer: ::core::option::Option<Peer>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MessagePayload {
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub file_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub reply_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "4")]
    pub mentions: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MessageAccept {
    #[prost(int32, tag = "1")]
    pub counter: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileWantRequest {
    #[prost(string, repeated, tag = "1")]
    pub file_id: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileWantResponse {
    #[prost(string, repeated, tag = "1")]
    pub file_id: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CompareRequest {
    #[prost(message, repeated, tag = "1")]
    pub compare_payload: ::prost::alloc::vec::Vec<ComparePayload>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CompareResponse {
    #[prost(string, repeated, tag = "1")]
    pub peer_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ComparePayload {
    #[prost(int32, tag = "1")]
    pub counter: i32,
    #[prost(string, tag = "2")]
    pub peer_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchMessageRequest {
    #[prost(int32, tag = "1")]
    pub my_counter: i32,
    #[prost(string, tag = "2")]
    pub peer_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchMessageResponse {
    #[prost(message, repeated, tag = "1")]
    pub messages: ::prost::alloc::vec::Vec<Message>,
    #[prost(message, optional, tag = "2")]
    pub peer: ::core::option::Option<Peer>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Peer {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub pub_key: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatMessage {
    #[prost(oneof = "chat_message::Variant", tags = "1, 2, 3, 4, 5, 6, 7, 8, 9, 10")]
    pub variant: ::core::option::Option<chat_message::Variant>,
}
/// Nested message and enum types in `ChatMessage`.
pub mod chat_message {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Variant {
        #[prost(message, tag = "1")]
        FileDownloadRequest(super::FileDownloadRequest),
        #[prost(message, tag = "2")]
        FileDownloadResponse(super::FileDownloadResponse),
        #[prost(message, tag = "3")]
        Messages(super::Messages),
        #[prost(message, tag = "4")]
        MessageAccept(super::MessageAccept),
        #[prost(message, tag = "5")]
        BatchMessageRequest(super::BatchMessageRequest),
        #[prost(message, tag = "6")]
        BatchMessageResponse(super::BatchMessageResponse),
        #[prost(message, tag = "7")]
        CompareRequest(super::CompareRequest),
        #[prost(message, tag = "8")]
        CompareResponse(super::CompareResponse),
        #[prost(message, tag = "9")]
        FileWantRequest(super::FileWantRequest),
        #[prost(message, tag = "10")]
        FileWantResponse(super::FileWantResponse),
    }
}
