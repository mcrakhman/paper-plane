// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(chatFFI)
import chatFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_chat_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_chat_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




public protocol ChatDelegate : AnyObject {
    
    func onEvent(event: Event) 
    
}

open class ChatDelegateImpl:
    ChatDelegate {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_chat_fn_clone_chatdelegate(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_chat_fn_free_chatdelegate(pointer, $0) }
    }

    

    
open func onEvent(event: Event) {try! rustCall() {
    uniffi_chat_fn_method_chatdelegate_on_event(self.uniffiClonePointer(),
        FfiConverterTypeEvent.lower(event),$0
    )
}
}
    

}
// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceChatDelegate {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceChatDelegate = UniffiVTableCallbackInterfaceChatDelegate(
        onEvent: { (
            uniffiHandle: UInt64,
            event: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterTypeChatDelegate.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.onEvent(
                     event: try FfiConverterTypeEvent.lift(event)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeChatDelegate.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface ChatDelegate: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitChatDelegate() {
    uniffi_chat_fn_init_callback_vtable_chatdelegate(&UniffiCallbackInterfaceChatDelegate.vtable)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeChatDelegate: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<ChatDelegate>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ChatDelegate

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ChatDelegate {
        return ChatDelegateImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ChatDelegate) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ChatDelegate {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ChatDelegate, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeChatDelegate_lift(_ pointer: UnsafeMutableRawPointer) throws -> ChatDelegate {
    return try FfiConverterTypeChatDelegate.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeChatDelegate_lower(_ value: ChatDelegate) -> UnsafeMutableRawPointer {
    return FfiConverterTypeChatDelegate.lower(value)
}




public protocol ChatManagerProtocol : AnyObject {
    
    func getAllMessages() throws  -> [Message]
    
    func getDnsRecord()  -> Data
    
    func getFilePath(fileId: String) throws  -> String
    
    func getName()  -> String
    
    func getPeers() throws  -> [Peer]
    
    func resolveFile(fileId: String, peerId: String?) throws 
    
    func runLoop() 
    
    func runServer() 
    
    func sendMessage(message: String?, fileId: String?) throws 
    
    func setDelegate(delegate: ChatDelegate) 
    
    func setFilePath(fileId: String, format: String, filePath: String) throws 
    
    func setPeer(name: String, addr: String, pubKey: String) throws 
    
    func verifyRecord(record: Data) throws  -> DnsRecord
    
}

open class ChatManager:
    ChatManagerProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_chat_fn_clone_chatmanager(self.pointer, $0) }
    }
public convenience init(name: String, rootPath: String, port: UInt16)throws  {
    let pointer =
        try rustCallWithError(FfiConverterTypeChatError.lift) {
    uniffi_chat_fn_constructor_chatmanager_new(
        FfiConverterString.lower(name),
        FfiConverterString.lower(rootPath),
        FfiConverterUInt16.lower(port),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_chat_fn_free_chatmanager(pointer, $0) }
    }

    

    
open func getAllMessages()throws  -> [Message] {
    return try  FfiConverterSequenceTypeMessage.lift(try rustCallWithError(FfiConverterTypeChatError.lift) {
    uniffi_chat_fn_method_chatmanager_get_all_messages(self.uniffiClonePointer(),$0
    )
})
}
    
open func getDnsRecord() -> Data {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_chat_fn_method_chatmanager_get_dns_record(self.uniffiClonePointer(),$0
    )
})
}
    
open func getFilePath(fileId: String)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeChatError.lift) {
    uniffi_chat_fn_method_chatmanager_get_file_path(self.uniffiClonePointer(),
        FfiConverterString.lower(fileId),$0
    )
})
}
    
open func getName() -> String {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_chat_fn_method_chatmanager_get_name(self.uniffiClonePointer(),$0
    )
})
}
    
open func getPeers()throws  -> [Peer] {
    return try  FfiConverterSequenceTypePeer.lift(try rustCallWithError(FfiConverterTypeChatError.lift) {
    uniffi_chat_fn_method_chatmanager_get_peers(self.uniffiClonePointer(),$0
    )
})
}
    
open func resolveFile(fileId: String, peerId: String?)throws  {try rustCallWithError(FfiConverterTypeChatError.lift) {
    uniffi_chat_fn_method_chatmanager_resolve_file(self.uniffiClonePointer(),
        FfiConverterString.lower(fileId),
        FfiConverterOptionString.lower(peerId),$0
    )
}
}
    
open func runLoop() {try! rustCall() {
    uniffi_chat_fn_method_chatmanager_run_loop(self.uniffiClonePointer(),$0
    )
}
}
    
open func runServer() {try! rustCall() {
    uniffi_chat_fn_method_chatmanager_run_server(self.uniffiClonePointer(),$0
    )
}
}
    
open func sendMessage(message: String?, fileId: String?)throws  {try rustCallWithError(FfiConverterTypeChatError.lift) {
    uniffi_chat_fn_method_chatmanager_send_message(self.uniffiClonePointer(),
        FfiConverterOptionString.lower(message),
        FfiConverterOptionString.lower(fileId),$0
    )
}
}
    
open func setDelegate(delegate: ChatDelegate) {try! rustCall() {
    uniffi_chat_fn_method_chatmanager_set_delegate(self.uniffiClonePointer(),
        FfiConverterTypeChatDelegate.lower(delegate),$0
    )
}
}
    
open func setFilePath(fileId: String, format: String, filePath: String)throws  {try rustCallWithError(FfiConverterTypeChatError.lift) {
    uniffi_chat_fn_method_chatmanager_set_file_path(self.uniffiClonePointer(),
        FfiConverterString.lower(fileId),
        FfiConverterString.lower(format),
        FfiConverterString.lower(filePath),$0
    )
}
}
    
open func setPeer(name: String, addr: String, pubKey: String)throws  {try rustCallWithError(FfiConverterTypeChatError.lift) {
    uniffi_chat_fn_method_chatmanager_set_peer(self.uniffiClonePointer(),
        FfiConverterString.lower(name),
        FfiConverterString.lower(addr),
        FfiConverterString.lower(pubKey),$0
    )
}
}
    
open func verifyRecord(record: Data)throws  -> DnsRecord {
    return try  FfiConverterTypeDnsRecord.lift(try rustCallWithError(FfiConverterTypeChatError.lift) {
    uniffi_chat_fn_method_chatmanager_verify_record(self.uniffiClonePointer(),
        FfiConverterData.lower(record),$0
    )
})
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeChatManager: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ChatManager

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ChatManager {
        return ChatManager(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ChatManager) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ChatManager {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ChatManager, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeChatManager_lift(_ pointer: UnsafeMutableRawPointer) throws -> ChatManager {
    return try FfiConverterTypeChatManager.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeChatManager_lower(_ value: ChatManager) -> UnsafeMutableRawPointer {
    return FfiConverterTypeChatManager.lower(value)
}


public struct DnsRecord {
    public var port: UInt16
    public var name: String
    public var pubKey: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(port: UInt16, name: String, pubKey: String) {
        self.port = port
        self.name = name
        self.pubKey = pubKey
    }
}



extension DnsRecord: Equatable, Hashable {
    public static func ==(lhs: DnsRecord, rhs: DnsRecord) -> Bool {
        if lhs.port != rhs.port {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        if lhs.pubKey != rhs.pubKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(port)
        hasher.combine(name)
        hasher.combine(pubKey)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDnsRecord: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DnsRecord {
        return
            try DnsRecord(
                port: FfiConverterUInt16.read(from: &buf), 
                name: FfiConverterString.read(from: &buf), 
                pubKey: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: DnsRecord, into buf: inout [UInt8]) {
        FfiConverterUInt16.write(value.port, into: &buf)
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterString.write(value.pubKey, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDnsRecord_lift(_ buf: RustBuffer) throws -> DnsRecord {
    return try FfiConverterTypeDnsRecord.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDnsRecord_lower(_ value: DnsRecord) -> RustBuffer {
    return FfiConverterTypeDnsRecord.lower(value)
}


public struct Message {
    public var order: String
    public var id: String
    public var text: String
    public var fileId: String?
    public var filePath: String?
    public var peerId: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(order: String, id: String, text: String, fileId: String?, filePath: String?, peerId: String) {
        self.order = order
        self.id = id
        self.text = text
        self.fileId = fileId
        self.filePath = filePath
        self.peerId = peerId
    }
}



extension Message: Equatable, Hashable {
    public static func ==(lhs: Message, rhs: Message) -> Bool {
        if lhs.order != rhs.order {
            return false
        }
        if lhs.id != rhs.id {
            return false
        }
        if lhs.text != rhs.text {
            return false
        }
        if lhs.fileId != rhs.fileId {
            return false
        }
        if lhs.filePath != rhs.filePath {
            return false
        }
        if lhs.peerId != rhs.peerId {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(order)
        hasher.combine(id)
        hasher.combine(text)
        hasher.combine(fileId)
        hasher.combine(filePath)
        hasher.combine(peerId)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMessage: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Message {
        return
            try Message(
                order: FfiConverterString.read(from: &buf), 
                id: FfiConverterString.read(from: &buf), 
                text: FfiConverterString.read(from: &buf), 
                fileId: FfiConverterOptionString.read(from: &buf), 
                filePath: FfiConverterOptionString.read(from: &buf), 
                peerId: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: Message, into buf: inout [UInt8]) {
        FfiConverterString.write(value.order, into: &buf)
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterString.write(value.text, into: &buf)
        FfiConverterOptionString.write(value.fileId, into: &buf)
        FfiConverterOptionString.write(value.filePath, into: &buf)
        FfiConverterString.write(value.peerId, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMessage_lift(_ buf: RustBuffer) throws -> Message {
    return try FfiConverterTypeMessage.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMessage_lower(_ value: Message) -> RustBuffer {
    return FfiConverterTypeMessage.lower(value)
}


public struct Peer {
    public var id: String
    public var name: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, name: String) {
        self.id = id
        self.name = name
    }
}



extension Peer: Equatable, Hashable {
    public static func ==(lhs: Peer, rhs: Peer) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(name)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePeer: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Peer {
        return
            try Peer(
                id: FfiConverterString.read(from: &buf), 
                name: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: Peer, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterString.write(value.name, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePeer_lift(_ buf: RustBuffer) throws -> Peer {
    return try FfiConverterTypePeer.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePeer_lower(_ value: Peer) -> RustBuffer {
    return FfiConverterTypePeer.lower(value)
}


public enum ChatError {

    
    
    case FailedToCreateNew(String
    )
    case FailedToDecodeTxtRecord
    case FailedToConnect
    case FailedToSend
    case FailedToDownload(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeChatError: FfiConverterRustBuffer {
    typealias SwiftType = ChatError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ChatError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .FailedToCreateNew(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .FailedToDecodeTxtRecord
        case 3: return .FailedToConnect
        case 4: return .FailedToSend
        case 5: return .FailedToDownload(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ChatError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .FailedToCreateNew(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .FailedToDecodeTxtRecord:
            writeInt(&buf, Int32(2))
        
        
        case .FailedToConnect:
            writeInt(&buf, Int32(3))
        
        
        case .FailedToSend:
            writeInt(&buf, Int32(4))
        
        
        case let .FailedToDownload(v1):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


extension ChatError: Equatable, Hashable {}

extension ChatError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Event {
    
    case message(Message
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeEvent: FfiConverterRustBuffer {
    typealias SwiftType = Event

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Event {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .message(try FfiConverterTypeMessage.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Event, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .message(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeMessage.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEvent_lift(_ buf: RustBuffer) throws -> Event {
    return try FfiConverterTypeEvent.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeEvent_lower(_ value: Event) -> RustBuffer {
    return FfiConverterTypeEvent.lower(value)
}



extension Event: Equatable, Hashable {}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeMessage: FfiConverterRustBuffer {
    typealias SwiftType = [Message]

    public static func write(_ value: [Message], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeMessage.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Message] {
        let len: Int32 = try readInt(&buf)
        var seq = [Message]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeMessage.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypePeer: FfiConverterRustBuffer {
    typealias SwiftType = [Peer]

    public static func write(_ value: [Peer], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePeer.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Peer] {
        let len: Int32 = try readInt(&buf)
        var seq = [Peer]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypePeer.read(from: &buf))
        }
        return seq
    }
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_chat_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_chat_checksum_method_chatdelegate_on_event() != 34621) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chat_checksum_method_chatmanager_get_all_messages() != 55172) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chat_checksum_method_chatmanager_get_dns_record() != 38484) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chat_checksum_method_chatmanager_get_file_path() != 9610) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chat_checksum_method_chatmanager_get_name() != 22038) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chat_checksum_method_chatmanager_get_peers() != 63021) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chat_checksum_method_chatmanager_resolve_file() != 42094) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chat_checksum_method_chatmanager_run_loop() != 10062) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chat_checksum_method_chatmanager_run_server() != 6893) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chat_checksum_method_chatmanager_send_message() != 21324) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chat_checksum_method_chatmanager_set_delegate() != 35973) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chat_checksum_method_chatmanager_set_file_path() != 28247) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chat_checksum_method_chatmanager_set_peer() != 45106) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chat_checksum_method_chatmanager_verify_record() != 44798) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_chat_checksum_constructor_chatmanager_new() != 47729) {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitChatDelegate()
    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all